def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def flutterCompileVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileVersion == null) {
    flutterCompileVersion = '31'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '23'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: "com.google.gms.google-services"

// https://flutter.dev/docs/deployment/android#configure-signing-in-gradle
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "app.fitgeneration.fit_generation"
//        minSdkVersion 23
//        targetSdkVersion 31
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterCompileVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        // refer to: https://blog.codemagic.io/the-simple-guide-to-android-code-signing/
        file(rootProject.file('key.properties')).with { propFile ->
            if (propFile.canRead()) {

                release {
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                    storePassword keystoreProperties['storePassword']
                }
            } else {
                print('not signed')
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // refer to: https://blog.codemagic.io/the-simple-guide-to-android-code-signing/
            file(rootProject.file('key.properties')).with { propFile ->
                if (propFile.canRead()) {
                    // because we can read the keystore
                    // we are building locally
                    // so sign locally
                    // otherwise build an unsigned apk for later signing by the CI/CD provider

                    signingConfig signingConfigs.release
                }
            }

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    output.outputFileName = "app-release.aab" // changed from "app-release.apk"
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
